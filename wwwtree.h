// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/nfs-7/userdata/phchang/WWW_babies/WWW2018_v5.1.9/bdt_skim_slim/lostlep_0_skim.root", "t", "wwwtree", "tas", "www")

#ifndef wwwtree_H
#define wwwtree_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class wwwtree {
 private: 
 protected: 
  unsigned int index;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned long long evt_;
  TBranch *evt_branch;
  bool     evt_isLoaded;
  TString *CMS4path_;
  TBranch *CMS4path_branch;
  bool     CMS4path_isLoaded;
  int      CMS4index_;
  TBranch *CMS4index_branch;
  bool     CMS4index_isLoaded;
  vector<float> *lep_pt_;
  TBranch *lep_pt_branch;
  bool     lep_pt_isLoaded;
  vector<int> *lep_lostHits_;
  TBranch *lep_lostHits_branch;
  bool     lep_lostHits_isLoaded;
  vector<int> *lep_convVeto_;
  TBranch *lep_convVeto_branch;
  bool     lep_convVeto_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_tight_;
  TBranch *lep_pass_VVV_cutbased_tight_branch;
  bool     lep_pass_VVV_cutbased_tight_isLoaded;
  vector<int> *lep_pdgId_;
  TBranch *lep_pdgId_branch;
  bool     lep_pdgId_isLoaded;
  vector<float> *lep_relIso03EAv2Lep_;
  TBranch *lep_relIso03EAv2Lep_branch;
  bool     lep_relIso03EAv2Lep_isLoaded;
  vector<float> *lep_MVA_;
  TBranch *lep_MVA_branch;
  bool     lep_MVA_isLoaded;
  vector<float> *jets_btag_score_;
  TBranch *jets_btag_score_branch;
  bool     jets_btag_score_isLoaded;
  float    met_pt_;
  TBranch *met_pt_branch;
  bool     met_pt_isLoaded;
  float    met_phi_;
  TBranch *met_phi_branch;
  bool     met_phi_isLoaded;
  int      nisoTrack_mt2_cleaned_VVV_cutbased_veto_;
  TBranch *nisoTrack_mt2_cleaned_VVV_cutbased_veto_branch;
  bool     nisoTrack_mt2_cleaned_VVV_cutbased_veto_isLoaded;
  int      nSFOS_;
  TBranch *nSFOS_branch;
  bool     nSFOS_isLoaded;
  int      nSFOSinZ_;
  TBranch *nSFOSinZ_branch;
  bool     nSFOSinZ_isLoaded;
  int      nj_;
  TBranch *nj_branch;
  bool     nj_isLoaded;
  int      nj30_;
  TBranch *nj30_branch;
  bool     nj30_isLoaded;
  int      nb_;
  TBranch *nb_branch;
  bool     nb_isLoaded;
  float    Mljmin_;
  TBranch *Mljmin_branch;
  bool     Mljmin_isLoaded;
  float    Mljmax_;
  TBranch *Mljmax_branch;
  bool     Mljmax_isLoaded;
  float    DRljmin_;
  TBranch *DRljmin_branch;
  bool     DRljmin_isLoaded;
  float    DRljmax_;
  TBranch *DRljmax_branch;
  bool     DRljmax_isLoaded;
  float    Mljmin3L_;
  TBranch *Mljmin3L_branch;
  bool     Mljmin3L_isLoaded;
  float    Mljmax3L_;
  TBranch *Mljmax3L_branch;
  bool     Mljmax3L_isLoaded;
  float    DRljmin3L_;
  TBranch *DRljmin3L_branch;
  bool     DRljmin3L_isLoaded;
  float    DRljmax3L_;
  TBranch *DRljmax3L_branch;
  bool     DRljmax3L_isLoaded;
  float    Mjj_;
  TBranch *Mjj_branch;
  bool     Mjj_isLoaded;
  float    MjjVBF_;
  TBranch *MjjVBF_branch;
  bool     MjjVBF_isLoaded;
  float    DetajjVBF_;
  TBranch *DetajjVBF_branch;
  bool     DetajjVBF_isLoaded;
  float    MjjL_;
  TBranch *MjjL_branch;
  bool     MjjL_isLoaded;
  float    DetajjL_;
  TBranch *DetajjL_branch;
  bool     DetajjL_isLoaded;
  float    MllSS_;
  TBranch *MllSS_branch;
  bool     MllSS_isLoaded;
  float    Mll3L_;
  TBranch *Mll3L_branch;
  bool     Mll3L_isLoaded;
  float    Mee3L_;
  TBranch *Mee3L_branch;
  bool     Mee3L_isLoaded;
  float    Mll3L1_;
  TBranch *Mll3L1_branch;
  bool     Mll3L1_isLoaded;
  float    M3l_;
  TBranch *M3l_branch;
  bool     M3l_isLoaded;
  float    Pt3l_;
  TBranch *Pt3l_branch;
  bool     Pt3l_isLoaded;
  float    Pt2l_;
  TBranch *Pt2l_branch;
  bool     Pt2l_isLoaded;
  float    DPhi3lMET_;
  TBranch *DPhi3lMET_branch;
  bool     DPhi3lMET_isLoaded;
  float    MTmax_;
  TBranch *MTmax_branch;
  bool     MTmax_isLoaded;
  float    MTmin_;
  TBranch *MTmin_branch;
  bool     MTmin_isLoaded;
  float    MT3rd_;
  TBranch *MT3rd_branch;
  bool     MT3rd_isLoaded;
  float    MTmax3L_;
  TBranch *MTmax3L_branch;
  bool     MTmax3L_isLoaded;
  float    event_weight_;
  TBranch *event_weight_branch;
  bool     event_weight_isLoaded;
  float    trigger_scale_factor_;
  TBranch *trigger_scale_factor_branch;
  bool     trigger_scale_factor_isLoaded;
  float    lepton_scale_factor_;
  TBranch *lepton_scale_factor_branch;
  bool     lepton_scale_factor_isLoaded;
  float    btag_scale_factor_;
  TBranch *btag_scale_factor_branch;
  bool     btag_scale_factor_isLoaded;
  int      SRSSee_;
  TBranch *SRSSee_branch;
  bool     SRSSee_isLoaded;
  int      SRSSem_;
  TBranch *SRSSem_branch;
  bool     SRSSem_isLoaded;
  int      SRSSmm_;
  TBranch *SRSSmm_branch;
  bool     SRSSmm_isLoaded;
  int      SR0SFOS_;
  TBranch *SR0SFOS_branch;
  bool     SR0SFOS_isLoaded;
  int      SR1SFOS_;
  TBranch *SR1SFOS_branch;
  bool     SR1SFOS_isLoaded;
  int      SR2SFOS_;
  TBranch *SR2SFOS_branch;
  bool     SR2SFOS_isLoaded;
  int      SRSSeeMjjInFull_;
  TBranch *SRSSeeMjjInFull_branch;
  bool     SRSSeeMjjInFull_isLoaded;
  int      SRSSemMjjInFull_;
  TBranch *SRSSemMjjInFull_branch;
  bool     SRSSemMjjInFull_isLoaded;
  int      SRSSmmMjjInFull_;
  TBranch *SRSSmmMjjInFull_branch;
  bool     SRSSmmMjjInFull_isLoaded;
  int      SRSSeeMjjOutFull_;
  TBranch *SRSSeeMjjOutFull_branch;
  bool     SRSSeeMjjOutFull_isLoaded;
  int      SRSSemMjjOutFull_;
  TBranch *SRSSemMjjOutFull_branch;
  bool     SRSSemMjjOutFull_isLoaded;
  int      SRSSmmMjjOutFull_;
  TBranch *SRSSmmMjjOutFull_branch;
  bool     SRSSmmMjjOutFull_isLoaded;
  int      SRSS1JeeFull_;
  TBranch *SRSS1JeeFull_branch;
  bool     SRSS1JeeFull_isLoaded;
  int      SRSS1JemFull_;
  TBranch *SRSS1JemFull_branch;
  bool     SRSS1JemFull_isLoaded;
  int      SRSS1JmmFull_;
  TBranch *SRSS1JmmFull_branch;
  bool     SRSS1JmmFull_isLoaded;
  int      SR0SFOSFull_;
  TBranch *SR0SFOSFull_branch;
  bool     SR0SFOSFull_isLoaded;
  int      SR1SFOSFull_;
  TBranch *SR1SFOSFull_branch;
  bool     SR1SFOSFull_isLoaded;
  int      SR2SFOSFull_;
  TBranch *SR2SFOSFull_branch;
  bool     SR2SFOSFull_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const TString &CMS4path();
  const int &CMS4index();
  const vector<float> &lep_pt();
  const vector<int> &lep_lostHits();
  const vector<int> &lep_convVeto();
  const vector<int> &lep_pass_VVV_cutbased_tight();
  const vector<int> &lep_pdgId();
  const vector<float> &lep_relIso03EAv2Lep();
  const vector<float> &lep_MVA();
  const vector<float> &jets_btag_score();
  const float &met_pt();
  const float &met_phi();
  const int &nisoTrack_mt2_cleaned_VVV_cutbased_veto();
  const int &nSFOS();
  const int &nSFOSinZ();
  const int &nj();
  const int &nj30();
  const int &nb();
  const float &Mljmin();
  const float &Mljmax();
  const float &DRljmin();
  const float &DRljmax();
  const float &Mljmin3L();
  const float &Mljmax3L();
  const float &DRljmin3L();
  const float &DRljmax3L();
  const float &Mjj();
  const float &MjjVBF();
  const float &DetajjVBF();
  const float &MjjL();
  const float &DetajjL();
  const float &MllSS();
  const float &Mll3L();
  const float &Mee3L();
  const float &Mll3L1();
  const float &M3l();
  const float &Pt3l();
  const float &Pt2l();
  const float &DPhi3lMET();
  const float &MTmax();
  const float &MTmin();
  const float &MT3rd();
  const float &MTmax3L();
  const float &event_weight();
  const float &trigger_scale_factor();
  const float &lepton_scale_factor();
  const float &btag_scale_factor();
  const int &SRSSee();
  const int &SRSSem();
  const int &SRSSmm();
  const int &SR0SFOS();
  const int &SR1SFOS();
  const int &SR2SFOS();
  const int &SRSSeeMjjInFull();
  const int &SRSSemMjjInFull();
  const int &SRSSmmMjjInFull();
  const int &SRSSeeMjjOutFull();
  const int &SRSSemMjjOutFull();
  const int &SRSSmmMjjOutFull();
  const int &SRSS1JeeFull();
  const int &SRSS1JemFull();
  const int &SRSS1JmmFull();
  const int &SR0SFOSFull();
  const int &SR1SFOSFull();
  const int &SR2SFOSFull();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern wwwtree www;
#endif

namespace tas {
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const TString &CMS4path();
  const int &CMS4index();
  const vector<float> &lep_pt();
  const vector<int> &lep_lostHits();
  const vector<int> &lep_convVeto();
  const vector<int> &lep_pass_VVV_cutbased_tight();
  const vector<int> &lep_pdgId();
  const vector<float> &lep_relIso03EAv2Lep();
  const vector<float> &lep_MVA();
  const vector<float> &jets_btag_score();
  const float &met_pt();
  const float &met_phi();
  const int &nisoTrack_mt2_cleaned_VVV_cutbased_veto();
  const int &nSFOS();
  const int &nSFOSinZ();
  const int &nj();
  const int &nj30();
  const int &nb();
  const float &Mljmin();
  const float &Mljmax();
  const float &DRljmin();
  const float &DRljmax();
  const float &Mljmin3L();
  const float &Mljmax3L();
  const float &DRljmin3L();
  const float &DRljmax3L();
  const float &Mjj();
  const float &MjjVBF();
  const float &DetajjVBF();
  const float &MjjL();
  const float &DetajjL();
  const float &MllSS();
  const float &Mll3L();
  const float &Mee3L();
  const float &Mll3L1();
  const float &M3l();
  const float &Pt3l();
  const float &Pt2l();
  const float &DPhi3lMET();
  const float &MTmax();
  const float &MTmin();
  const float &MT3rd();
  const float &MTmax3L();
  const float &event_weight();
  const float &trigger_scale_factor();
  const float &lepton_scale_factor();
  const float &btag_scale_factor();
  const int &SRSSee();
  const int &SRSSem();
  const int &SRSSmm();
  const int &SR0SFOS();
  const int &SR1SFOS();
  const int &SR2SFOS();
  const int &SRSSeeMjjInFull();
  const int &SRSSemMjjInFull();
  const int &SRSSmmMjjInFull();
  const int &SRSSeeMjjOutFull();
  const int &SRSSemMjjOutFull();
  const int &SRSSmmMjjOutFull();
  const int &SRSS1JeeFull();
  const int &SRSS1JemFull();
  const int &SRSS1JmmFull();
  const int &SR0SFOSFull();
  const int &SR1SFOSFull();
  const int &SR2SFOSFull();
}
#include "rooutil.h"
#endif
